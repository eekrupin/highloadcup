// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type locationTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *locationTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("location").
func (v *locationTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *locationTableType) Columns() []string {
	return []string{"id", "place", "country", "city", "distance"}
}

// NewStruct makes a new struct for that view or table.
func (v *locationTableType) NewStruct() reform.Struct {
	return new(Location)
}

// NewRecord makes a new record for that table.
func (v *locationTableType) NewRecord() reform.Record {
	return new(Location)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *locationTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// LocationTable represents location view or table in SQL database.
var LocationTable = &locationTableType{
	s: parse.StructInfo{Type: "Location", SQLSchema: "", SQLName: "location", Fields: []parse.FieldInfo{{Name: "Id", Type: "uint32", Column: "id"}, {Name: "Place", Type: "string", Column: "place"}, {Name: "Country", Type: "string", Column: "country"}, {Name: "City", Type: "string", Column: "city"}, {Name: "Distance", Type: "uint32", Column: "distance"}}, PKFieldIndex: 0},
	z: new(Location).Values(),
}

// String returns a string representation of this struct or record.
func (s Location) String() string {
	res := make([]string, 5)
	res[0] = "Id: " + reform.Inspect(s.Id, true)
	res[1] = "Place: " + reform.Inspect(s.Place, true)
	res[2] = "Country: " + reform.Inspect(s.Country, true)
	res[3] = "City: " + reform.Inspect(s.City, true)
	res[4] = "Distance: " + reform.Inspect(s.Distance, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Location) Values() []interface{} {
	return []interface{}{
		s.Id,
		s.Place,
		s.Country,
		s.City,
		s.Distance,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Location) Pointers() []interface{} {
	return []interface{}{
		&s.Id,
		&s.Place,
		&s.Country,
		&s.City,
		&s.Distance,
	}
}

// View returns View object for that struct.
func (s *Location) View() reform.View {
	return LocationTable
}

// Table returns Table object for that record.
func (s *Location) Table() reform.Table {
	return LocationTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Location) PKValue() interface{} {
	return s.Id
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Location) PKPointer() interface{} {
	return &s.Id
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Location) HasPK() bool {
	return s.Id != LocationTable.z[LocationTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Location) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.Id = uint32(i64)
	} else {
		s.Id = pk.(uint32)
	}
}

// check interfaces
var (
	_ reform.View   = LocationTable
	_ reform.Struct = (*Location)(nil)
	_ reform.Table  = LocationTable
	_ reform.Record = (*Location)(nil)
	_ fmt.Stringer  = (*Location)(nil)
)

func init() {
	parse.AssertUpToDate(&LocationTable.s, new(Location))
}
